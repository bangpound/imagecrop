<?php
// $Id$

/**
 * @file
 * Provides a javascript toolbox through an imagecache action.
 *
 * @author Zuuperman - http://drupal.org/user/361625 - http://www.menhir.be
 *
 * @date
 * Oct 13, 2010
 */

/**
 * Implements hook_hook_info().
 */
function imagecrop_hook_info() {

  return array(
    'perm' => array('group' => 'registry'),
    'theme' => array('group' => 'registry'),
    'menu' => array('group' => 'registry'),
    'image_effect_info' => array('group' => 'registry'),
    'form_field_ui_field_edit_form_alter' => array('group' => 'forms'),
    'element_info_alter' => array('group' => 'forms'),
  );

}

function imagecrop_preprocess_page(&$variables) {
  $variables['theme_hook_suggestion'] = 'page-imagecrop';
  include_once (dirname(__FILE__) .'/imagecrop.theme.inc');
}

function imagecrop_preprocess_html(&$variables) {
  $variables['theme_hook_suggestion'] = 'html-imagecrop';
}

/**
 * Helper function to get all the enabled styles for a given field.
 */
function imagecrop_get_fields_enabled_styles($entity_type, $field_name, $bundle) {

  $instance = field_info_instance($entity_type, $field_name, $bundle);

  // No imagecrop settings are found.
  if (!isset($instance['settings']['imagecrop'])) {
    return array();
  }

  return array_filter($instance['settings']['imagecrop']);

}

/**
 * Helper function to add click link.
 *
 * @param $fid fid from the file to crop
 * @param $element the form element
 *
 * @return link for opening the imagecrop admin.
 */
function imagecrop_linkitem($fid, $element = '') {

  $popup_link_function = variable_get('imagecrop_popup', 'basic');
  $width = variable_get('imagecrop_popup_width', 700);
  $height = variable_get('imagecrop_popup_height', 600);

  $url = url('imagecrop/overview/'. $fid .'/0/'. $element['#entity_type'] .'/'. $element['#bundle'] .'/'. $element['#field_name'], array('absolute' => TRUE));

  if ($popup_link_function != 'basic' && function_exists($popup_link_function) && $link = $popup_link_function($url, $width, $height)) {
    return $link;
  }
  else {
    return '[<a href="javascript:;" onclick="window.open(\''. $url .'\',\'imagecrop\',\'menubar=0,scrollbars=1,resizable=1,width='. $width .',height='. $height .'\');">'. t('Crop this image') .'</a>]';
  }

}

/**
 * Return a list of presets.
 *
 * @param $enabled_styles array of styles that are enabled for a field
 * @return $presets array with presetid to load and list of all other possible presets.
 */
function get_imagecrop_styles($enabled_styles = array()) {

  $apply_filter = (count($enabled_styles) > 0);

  $all_styles = image_styles();
  $styles = array();
  foreach ($all_styles as $key => $style) {
    foreach ($style['effects'] as $effect) {
      if ($effect['name'] == 'imagecrop_javascript') {

        // Skip if current style is not enabled.
        if ($apply_filter && !in_array($style['isid'], $enabled_styles)) {
          continue;
        }
        $styles[$style['isid']] = $style['name'];

      }
    }
  }

  return $styles;

}

/**
 * Image effect callback: Crop the image based on the javascript selected crop.
 *
 * @param $image An image object returned by image_load().
 * @param $data An array of settings from the user for cropping the image.
 * @return TRUE on success. FALSE on failure to crop the image.
 *
 */
function imagecrop_effect(&$image, $data) {
  return TRUE;
}

/**
 * Settings form for configuring a javascript imagecrop effect.
 */
function imagecrop_effect_form($data) {

  $form = image_resize_form($data);

  $form['xoffset'] = array(
    '#type' => 'textfield',
    '#title' => t('X offset'),
    '#default_value' => isset($data['xoffset']) ? $data['xoffset'] : '',
    '#description' => t('Enter an offset in pixels (without px) or use a keyword: <em>left</em>, <em>center</em>, or <em>right</em>.'),
    '#element_validate' => array('imagecrop_validate_offset'),
  );

  $form['yoffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Y offset'),
    '#default_value' => isset($data['yoffset']) ? $data['yoffset'] : '',
    '#description' => t('Enter an offset in pixels (without px) or use a keyword: <em>top</em>, <em>center</em>, or <em>bottom</em>.'),
    '#element_validate' => array('imagecrop_validate_offset'),
  );

  $form['resizable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is the toolbox resizable or not?'),
    '#default_value' => isset($data['resizable']) ? $data['resizable'] : '',
    '#description' => t('If the toolbox is resized, the crop values won\'t be respected, so you should add a Scale action after the ImageCrop.'),
  );

  $description = t('Enter an aspect ratio to preserve during resizing. This can take one of the following formats:');
  $description .= '<ul><li>'. t('A float (like 0.5 or 2).') .'</li>';
  $description .= '<li>'. t('The string \'KEEP\'. This will constrain the aspect ratio to that of the original image.') .'</li>';
  $description .= '<li>'. t('The string \'CROP\'. This will constrain the aspect ratio to the dimensions set above.') .'</li></ul>';
  $description .= t('Leave blank for no aspect ratio constraints.');

  $form['aspect'] = array(
    '#type' => 'textfield',
    '#title' => t('Aspect ratio'),
    '#default_value' => isset($data['aspect']) ? $data['aspect'] : '',
    '#description' => $description,
    '#element_validate' => array('imagecrop_validate_aspect'),
  );

  $form['disable_if_no_data'] = array(
    '#type' => 'checkbox',
    '#title' => t('Don\'t crop if cropping region wasn\'t set.'),
    '#default_value' => isset($data['disable_if_no_data']) ? $data['disable_if_no_data'] : FALSE,
  );

  return $form;

}

/**
 * Validation function to validate an entered offset value. (numbers or left / center / right)
 */
function imagecrop_validate_offset($element, &$form_state) {

  if ($element['#value'] == '') {
    return;
  }

  // numbers are allowed.
  if (is_numeric($element['#value'])) {
    return;
  }

  // if the value is a string, check on allowed strings
  if ($element['#value'] != 'center' && $element['#value'] != 'left' && $element['#value'] != 'right') {
    form_error($element, t('!name must be a correct offset value', array('!name' => $element['#title'])));
  }

}

/**
 * Validation function to validate an entered aspect value.
 */
function imagecrop_validate_aspect($element, &$form_state) {

  if ($element['#value'] == '') {
    return;
  }

  // numbers are allowed.
  if (is_numeric($element['#value'])) {
    return;
  }

  // if the value is a string, check on allowed strings
  if ($element['#value'] != 'KEEP' && $element['#value'] != 'CROP') {
    form_error($element, t('!name must be a correct aspect value', array('!name' => $element['#title'])));
  }

}